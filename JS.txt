JS:JavaScipt 
在html中的<head></head>标签中添加<script></script>标签
即：
<head>
<script>
	...
	...
</script>
</head>
创建对象：
	var 对象名={
		对象名.属性名=属性值,
		...,
		...,
		对象名.属性名=属性值
		
	}
对象含：
	内建对象（浏览器镶嵌的对象）
	宿主对象
	自定义对象
一、
定义函数:
函数表达式
var 对象名= new Function(){"函数体"}

函数声明:
function 函数名([参数，参数]){
函数体
}
匿名函数：
var 对象名=function(){
函数体
}
二、
变量的申明提前
	使用var关键字申明的变量，会在所有的代码执行之前被声明(但是不会赋值)
	但是如果申明变量时不适用var关键字，则变量不会被声明提前

函数的申明提前
	使用函数申明形式创建的函数function函数(){}
	它会在所有的代码执行之前就被创建，所以我们可以在函数申明前来调用
	使用函数表达式创建的函数，不会被申明提前，所以不能再申明前调用
  	fun2();//报错：
	fun();//顺利执行:我是一个fun函数
	function fun(){
	console.log("我是一个fun函数");
	}
	var fun2=function(){
	consollle.log("我是fun2函数");
	}
三、
作用域
作用域指一个变量的作用的范围
在JS中一共有两种作用域,
	1.全局作用域
		直接编写在script标签中的JS代码，都在全局作用域
		全局作用域在页面打开时创建，在页面关闭时销毁
		在全局作用域中有一个浏览器的窗口，它由浏览器创建我们可以直接使用
		
		在全局作用域中：
		创建的变量都会作为window对象的属性保存
		创建的函数都会作为window对象的方法保存
		
		全局作用域中的变量都是全局变量
		在页面的任意的部分都可以访问到
	2.函数作用域
		调用函数时创建函数作用域，函数执行完毕后，函数作用域销毁
		每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的
		在函数作用域中可以访问到全局作用域的变量，在全局作用域中无法访问到函数作用域的变量
		当在函数作用域操作一个变量时，他会先在自身作用域中寻找，如果有就直接使用
		如果没有则向上一级作用域中寻找，直到找到全局作用域
		如果全局作用域中依然没有找到，则会报错ReferenceError
		在函数中要访问全局变量可以使用window对象
	var a=10;
	function fun(){
	   var b=20;
	   var a="我是函数中的a"
	   console.log("a="+a);//输出：我是函数中的a
	   console.log("a="+window.a);//输出：10
	}
	fun();	
	console.log("b="+b);//报错
四、
解析器在调用函数每次都会向函数内部传递一个隐含的参数
这个隐含的参数就是this,this指向的是一个对象。
这个对象我们称为函数执行的上下文对象
根据函数的调用方式的不同，this会指向不同的对象
	1.以函数的形式调用时，this永远都是window
	2.以方法的形式调用是，this就是调用方法的那个对象
<script type="text/javascript">
	
 	function fun(){
	 	console.log(this.name);
	}
	var obj={
		name:"孙悟空",
		sayName:fun
	};
	var obj2={
		name:"沙和尚",
		sayName:fun
	};
	var name="Window's name"
	//以方法的形式调用
	obj.sayName();//Objet.fun():孙悟空
	obj2.sayName();//Objet.fun():沙和尚
	//以函数的方式调用
	fun();//window.fun():Window's name
</script>

五、
原型prototype
我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype
这个属性对应着一个对象，这个对象就是我们所谓的原型对象
如果函数作为普通函数调用prototype没有任何作用
当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性
指向该构造函数的原型对象，我们可以通过__prototype__来访问该属性
原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象。
我们可以将对象中公有的内容，统一设置到原型对象中。
当我们访问对象的一个属性或方法时，她会先在对象自身中寻找，如果有则直接使用
如果没有则会去原型对象中寻找，如果找到则直接使用
以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中
这样不用分别为每一个对象添加，也不会影响到全局作用域,就可以使每个对象都具有这些属性和方法了


	function MyClass(){


	}

	MyClass.prototype.a=123;
	MyClass.prototype.sayHello=function(){
	alert("Hello");
	};
	var mc=new MyClass();
	var mc2=new MyClass();
	console.log(MyClass.prototype);//
	console.log(mc2.__proto__==MyClass.prototype);//true
	console.log(mc.a);//123

	//向mc中添加a属性
	mc.a="我是mc中的a";
	mc.sayHello();//Hello
	console.log(mc.a);//我是mc中的a( mc中有a 则不去原型对象中找 )

图解如下：指向同一原型对象
-----------------------------------------------------


MyClass函数对象
proptotype    0x123    	----->	原型对象(0x123)
				a		123
通过MyClass创建对象 mc	----->	sayHello() 	alert("Hello")
__proto__     0x123

通过MyClass创建对象mc2	----->
__proto__     0x123

通过MyClass创建对象mc3	----->
__proto__     0x123

---------------------------------------------------



使用in检查对象中是否有某个属性时，如果对象中没有但是原型中有，则也会返回true
可以使用对象的hasOwnProperty()来检查自身中是否有该属性
使用该方法只有当对象自身中含有该属性时才会返回true
原型对象也是对象，所以它也有原型
当我们使用一个对象的属性或方法时，会先在自身中查找
自身中如果有，则直接使用
如果没有则去原型对象中寻找，如果原型对象中有，则使用
如果没有则去原型的原型中寻找，直到找到Object对象的原型
Object对象的原型没有原型，如果在Object中依然没有找到，则返回undefined



当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值
如果我们希望在输出对象时不输出[object Object],可以为对象添加一个toString()方法
new Person(){

}
//为了不只在当前对象起作用,将修改Person原型的toString
Person.prototype.toString=function(){
return "Person[name="+this.name+",age="+this.age+",gender=男]";
};
var per =new Person("孙悟空",18,"男");

console.log(per);//Person[name=孙悟空,age=18,gender=男]

六、
垃圾回收
当一个对象没有任何的变量或属性对他进行引用，此时我们将永远无法操作该对象  
此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢
所以这种垃圾必须进行清理
在JS中拥有自动垃圾回收机制，会自动将这些垃圾对象从内存中销毁。
我们不需要也不能进行垃圾回收的操作
我们需要做的只是要将不再使用的对象设置null即可

var obj=new Object();

obj=null;

读取数组中的元素
语法:数组[索引]
如果读取不存在的索引，他不会报错而是返回undefined
var arr=new Array();
arr[0]=10;
arr[1]=33;
arr[2]=22;
arr[10]=31；
//获取数组长度
console.log(arr.length);//11
console.log(arr[1]);//33
arr.length=10;
如果修改的length大于原长度，则多出部分会空出来
如果修改的length小于原长度，则多出的元素会被移除
	
	内建对象（浏览器镶嵌的对象）
	宿主对象
	自定义对象


数组(Array)
数组也是一个对象
它和我们普通对象功能类似，也是用来存储一些值的
不同的是普通对象是使用字符串作为属性名的
而数组是使用数字来作为索引操作元素
从0开始的整数就是索引
数组的存储性能比普通对象更好，在开发中我们经常使用数组来存储一些数据
var arr=new Array();
//使用typeof检查一个数组时，会返回object
console.log(typeof arr);//object
//向数组的最后一个位置添加元素
arr[arr.length]=70；
//如果读取不存在的索引，他不会不报错而是返回undefined

使用字面量创建数组：
//语法：[]
var arr=[1,2,3,4,5,10];
console.log(arr);//"1,2,3,4,5,10"
console.log(arr.length);//6
console.log(arr[1]);//2
//使用构造函数创建数组，也可以同时添加元素，将要添加的元素作为构造函数的参数传递
//元素之间使用","隔开
var arr2=new Array(1,2,3,4,5);
console.log(arr2);//"1,2,3,4,5"

//创建一个只有一个元素的数组
arr=[10];
console.log(arr);
//创建一个长度为10的数组
arr2=new Array(10);
console.log(arr2.length);//10

//数组中的元素可以是任意的数据类型
arr=["hello",1,true];

var obj={name:"孙悟空"};
arr[arr.length]=obj;
console.log(arr);//"hello",1,true,[object Object]
//数组中放置函数
arr=[function(){},function(){}];
console.log(arr);
//调用数组中的函数
arr[0]();

//数组中放置数组
arr=[[1,2,3],[3,4,5],[5,6,7]];
console.log(arr[1]);//"3,4,5"

var arr={"孙悟空","猪八戒","沙和尚"};
/*
push()
该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度
可以将要添加的元素作为方法的参数传递
这样这些元素将会自动添加到数组的末尾
该方法会将数组新的长度作为返回值返回
*/
arr.push("唐僧","蜘蛛精","白骨精");
console.log(arr);//"孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精" 
var result=arr.push("哈哈哈");
console.log("result="+result);//result=7

/*
pop()
该方法可以删除数组的最后一个元素
并将被删除的元素作为返回值返回
*/
arr.pop();
console.log(arr);//"孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精" 

/*
unshift()
向数组开头添加一个或多个元素,并返回新的数组长度
向前边插入元素以后，其他的元素索引会依次调整
*/
arr.unshift("牛魔王");
console.log(arr);"牛魔王","孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精" 
/*
shift()
可以删除数组的第一个元素,并将被删除的元素作为返回值返回
*/
result=arr.shift();
console.log(arr);
console.log(result);//牛魔王

数组的遍历：
	var arr=["孙悟空","猪八戒","沙和尚"];
	//所谓的遍历数组，就是将数组中所有的元素都取出来
	for(var i=0;i<arr.length;i++){
	console.log(arr[i]);
	}
/*
一般我们都是使用for循环去遍历数组
JS中还为我们提供一个方法，用来遍历数组
forEach()这个方法只支持IE8以上的浏览器
forEach()方法需要一个函数作为参数
像这种函数，由我们创建但是不由我们调用的，我们称为回调函数
数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历的元素
以实参的形式传递进来，我们可以来定义形参，来读取这些内容
浏览器会在回调函数中传递三个参数
第一个参数，就是当前正在遍历的元素
第二个参数，就是当前正在便利的元素的索引
第三个参数，就是正在遍历的数组
*/
var arr=["孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"];
arr.forEach(function(value,index,obj){
console.log("a="+value);
}
)
结果：  a=孙悟空
	a=猪八戒
	a=沙和尚
	a=唐僧
	a=蜘蛛精
	a=白骨精
/*
slice(start,end)
可以用来从数组提取指定元素
该元素不会改变元素数组，而是将截取到的元素封装到一个新数组中保存
参数：
	1.截取开始的位置的索引,包含开始索 引
	2.截取结束的位置的索引,不包含结束索引
		第二个参数可以不写，此时会截取从开始索引以后的所有元素
		第二个参数可以是负值
			-1:倒数第一个
			-2:倒数第二个
*/
var arr=["孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"];
var result=arr.slice(0,2);
console.log(result);//"孙悟空","猪八戒"
var result1=arr.slice(0,-1);
console.log(result1);//"孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精"

/*
splice()
可以用于删除数组中指定元素
使用splice()会影响到原数组，会将指定元素从原数组中删除
并及那个被删除的元素作为返回值返回
参数：
	第一个，表示开始位置的索引
	第二个，表示删除的数量
	第三个及以后。。
		可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边
*/
var arr=["孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"];
var result=arr.splice(1,2);
console.log(result);//"猪八戒","沙和尚"
var result=arr.splice(1,2,"牛魔王","铁扇公主","红孩儿");
console.log(result);//"孙悟空","牛魔王","铁扇公主","红孩儿","唐僧","蜘蛛精","白骨精"


/*
concat()可以连续两个或多个数组，并将新的数组返回
该方法不会对原数组产生影响
*/
var arr=["孙悟空","猪八戒","沙和尚"];
var arr2=["白骨精","玉兔精","蜘蛛精"];
var arr3=["二郎神","太上老君","玉皇大帝"]
var result=arr.concat(arr2,arr3,"牛魔王","铁扇公主");
console.log(result);

/*
join()
该方法可以将数组转换为一个字符串
该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回
在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符
如果不指定连接符，则默认使用，作为连接符
*/
var arr=["孙悟空","猪八戒","沙和尚"];
result=arr.join("--")
console.log(result);//"孙悟空--猪八戒--沙和尚"


/*
reverse()
该方法用来反转数组（前边的去后边，后边的去前边）
该方法会直接修改原数组
*/
arr.reverse();
console.log(arr);//"沙和尚","猪八戒"，"孙悟空"

/*
sort()
可以用来对数组中的元素进行排序
也会影响数组，默认会按照Unicode编码进行排序

即使对于纯数字的数组，使用sort()排序时,也会按照Unicode编码来排序
所以对数字进行排序时，可能会得到错误的结果

我们可以自己来指定排序的规则
我们可以在sort()添加一个回调函数,来指定排序规则
回调函数中需要定义两个形参,
浏览器将会分别使用数组中的元素作为实参去调用回调函数
使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边
浏览器会根据回调函数的返回值来决定元素的顺序，
如果返回一个大于0的值，则元素位置交换
如果返回一个小于0的值，则元素位置不变
如果返回一个0，则默认两个元素相等，也不交换位置

如果需要升序排序，则返回a-b;
如果需要降序排序,则返回b-a;
*/
arr=["b","d","e","a","c""];
arr.sort();
console.log(arr);//a,b,c,d,e

arr1=[3,4,11,2,5];
arr1.sort();
console.log(arr1);//11,2,3,4,5

arr=[5,4];
arr.sort(function(a,b){
return 1;
});
console.log(arr);//4,5

arr=[5,4];
arr.sort(function(a,b){
return -1;
});
console.log(arr);//5,4

arr=[5,4,2,1,3,6,8,7];
arr.sort(function(a,b){
//升序排序
return a-b;
//降序排序
//return b-a;
});
console.log(arr);//1，2，3，4，5，6，7，8


在调用函数时,浏览器每次都会传递进两个隐含的参数:
1.函数的上下文对象this
2.封装实参的对象arguments
	arguments是一个类数组对象,它也可以通过索引来操作数据,也可以获取长度
	在调用函数时，我们所传递的实参都会封装到arguments中保存
	arguments.length可以用来获取实参的长度
	我们即使不定义形参，也可以通过arguments来使用实参
	arguments[0]表示第一个实参
	arguments[1]表示第二个实参
	它里边有一个属性叫做callee.
	这个属性对应一个函数对象,就是当前正在指向的函数对象
function fun(a,b){
console.log(arguments instanceof Array);//false
console.log(Array.isArray(arguments));//false
console.log(arguments.length);//2
console.log(arguments[0]);//hello
console.log(arguments[1]);//true
console.log(arguments.callee);
console.log(arguments.callee==fun);
}
fun("hello",true);

七、
创建一个Date对象
如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间
var d=new Date();//创建当前日期
创建一个指定的时间对象
需要在构造函数中传递一个表示时间的字符串作为参数
日期的格式、月份/日/年 时:分:秒
var d2=new Date("12/03/2016 11:10:30");//创建指定日期
console.log(d2);

/*
getDate()
获取当前日期对象是几日
getDay()
获取当前日期周几0-6（0表示周日,1表示周一）
getMonth()
获取当前时间对象的月份，会表示一个0-11的值
0表示1月
1表示2月
11表示12月
getFullYear()
获取当前日期对象的年份
getTime()
获取当前日期的时间戳（指的是从格林威治时间的1970年1月1日,0时0分0秒到当前日期所花费的毫秒数）
计算机底层再保存时间时使用的都是时间戳
Date.now()
获取当前时间戳，可以通过时间戳来调试代码执行的性能
*/

var date=d2.getDate();//指定日期的几日
var date=d.getDate();//当前日期的几日

var day=d2.getDay();//当前日期的星期几
var month=d2.getMonth();//获取指定月份
var year=d.getFullYear();//获取当前年份

var time=d2.getTime();
console.log(time);//一串数字

var time=Date.now();
console.log(time);

八、
/*
Math.abs():计算绝对值
Math.cell():对一个数进行向上取整，小数位只有有就自动进一
Math.floor():对一个数进行向下取整，小数部分弃掉
Math.round():对一个数进行四舍五入
Math.random():可以用来生成一个0-1之间的随机数
Math.max(参数，参数...):可以获取其中的最大值
Math.min(参数，参数...):可以获取其中的最小值
Math.pow(x,y):返回x的y次幂
Math.sqrt(x):返回x的平方根，即对x进行开方

*/


九、
/*
基本数据类型:
String Number Boolean null undefined
引用数据类型:
Object Function Array
在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型转换为对象
String();
可以将基本数据类型字符串转换为String对象
Number();
可以将基本的数据类型数字转换为Number对象
Boolean();
可以将基本的数据类型布尔值转换为Boolean对象
*/
var num=new Number(3);
console.log(typeof num);


十、
字符串的底层是一个字符串数组
/*
str（字符串）.length():一个字符串长度
str.charAt(索引):可以返回字符串中指定位置的字符，也可以写为str[index]
str.charCodeAt(1):获取指定位置字符的字符编码(Unicode)
String(String对象).formCharCode(编码值即value):可以根据字符编码获取值
str.concat(str1,str2):连接字符串作用和+一样

str.indexOf("Char",Begin-index):
该方法可以检索字符串中是否含有指定内容,如果字符串中含有该内容，则会返回其第一次出现的索引
如果没有找到指定的内容，则返回-1
第二个参数即从哪个索引查找

str.lastIndexOf():该方法的用法和indexOf()一样，不同的是indexOf从前查找，lastIndexOf从最后开始查找

str.slice(startIndex,endIndex):可以从字符串中截取指定的内容不会影响原字符串，而是将截取到内容返回
参数:第一个，开始位置的索引（包括开始位置）
     第二个，结束位置的索引（不包括结束位置）如果省略第二个参数，则会截取到后面所有，也可以传递一个负数，从后面计算

str.substring(startIndex,endIndex):可以用来截取一个字符串，于slice()类似
参数：第一个，开始位置的索引（包括开始位置）
      第二个，结束位置的索引（不包括结束位置）
	不同的是这个方法不能接收负值作为参数，如果传了一个负值，则默认使用0
	而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换
str.substr(3,2):用来截取字符串
参数：1.截取开始位置索引
	2.截取长度

str.split(","):可以将一个字符串拆分为一个数组,并且以逗号作为分割符
参数：需要一个字符串作为参数，将会根据该字符串去拆分数组,如果传递一个空串，则默认为每个字符添加逗号

str.toUppercase():将一个字符串转换为大写字符串并返回
str.toLowercase():将一个字符串转换为小写字符串并返回都不影响原数组

*/

十一、
正则表达式：
正则表达式用于定义一些字符串的规则，
计算机可以根据正则表达式，来检查一个字符串是否符合规则
获取将字符串中符合规则的内容提取出来
//创建正则表达式的对象
/*
语法：
var 变量=new RegExp("正则表达式","匹配模式");
使用typeof检查正则对象，会返回object
var reg=new RegExp("a");这个正则表达式可以用来检查一个字符串是否有a
在构造函数中可以传递一个匹配模式作为第二个参数
可以是：
i:忽略大小写
g:全局匹配模式

*/

var reg=new RegExp("a");
var str="a";

/*
正则表达式的方法：
test()
使用这个方法可以用来检查一个字符串是否符合正则表达式的规则
如果符合则返回true,否则返回false
*/

var result=reg.test(str);
console.log(result)//true
console.log(reg.test("bcbc"));//false

/*
使用字面量来创建正则表达式
语法: var 变量=/正则表达式/匹配模式
使用字面量的方式创建更简单
使用构造函数创建更灵活
*/
//var reg=new RegExp("a","i");
reg=/a/i;
console.log(reg.test("abc"))；//true

//创建一个正则表达式，检查一个字符串中是否有a或b
reg=/a|b/;
console.log(reg.test("abc"));//true

//[]里的内容也是或的关系 [ab]==a|b
//[a-z]任意小写字母
//创建一个正则表达式检查一个字符串中是否有字母
reg=/[a-z]/
console.log(reg.test("a"));//true

//创建一个字符串中是否有abc或adc或aec
reg=/a[bde]c/
console.log(reg.test("abc"));//true

//[^a-z]:表示非小写字母 [A-z]:字母类型

//正则与split联用,这个方法即使不指定全局匹配，也会全部拆分
var str="1a2b3c4d5e6f7";
var result=str.split(/[A-z]/);
console.log(result);//1,2,3,4,5,6,7

//正则与serach()联用
/*
search()可以搜索字符串中是否含有指定内容
如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1
它可以接收一个正则表达式作为参数，然后会根据正则表达式检查字符串
search()只会查找第一个，即使设置全局匹配也没用
*/
str="hello abc hello abc";
result=str.search("abc");
console.log(result);

/*
搜索字符串是否有abc或afc
*/
str="hello abc adc";
result=str.search(/a[bef]c/);
console.log(result);

/*
正则与match()
可以根据正则表达式，从一个字符串中将符合条件的内容提取出来
默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索
我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容
可以为一个正则表达式设置多个匹配模式，且顺序无所谓
match()会将匹配到内容封装到一个数组中保存，即使只查到一个结果
*/

str="1a2b3c4d5e6f7A8B9";
result=str.match(/[a-z]/gi);
console.log(result);//a,b,c,d,e,f,A,B

/*
正则与replace()
replace(参数一,参数二)：可以将字符串中指定内容替换为新的内容
参数一：被替换的内容，可以接受一个正则表达式作为参数
参数二：新的内容
默认只会替换第一个
*/
var str="1a2a3c4d5e6f7A8B9";
var result=str.replace(/a/gi,"@_@");//将str中的a或A全替换为@_@


/*
量词
通过量词可以设置一个内容出现的次数
量词支队它前边的一个内容有效
{n} 正好出现n次
{m,n} 出现m~n次
{m,} m次以上
+ 至少一个，相当于{1,}
* 0个或多个,相当于{0,}
？ 0个或者一个，相当于{0,1}
^ 表示以...开头
$ 表示以...结尾
*/
var reg=/a{3}/;
console.log(reg.test("aaabc"));//true
var reg=/ab{3}/;
console.log(reg.test("ababab"));//false
var reg=/(ab){3}/;
console.log(reg.test("ababab"));//true

reg=/ab{1,3}c/;//指字符串中出现b的次数为1~3次

reg=/ab+c/;//指字符串中出现b的次数为1次或者以上
reg=/ab*c/;//指字符串中出现b的次数为0次或者以上
reg=/ab?c/;//指字符串中出现b的次数为0次或者1次

reg=/^a/;//匹配开头的a
reg=/a$/;//匹配结尾的a
reg=/^a$/;//只能匹配一个a


/*
.表示任意字符
在正则表达式中使用\作为转义字符
\.来表示
\\表示\
 
注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符
如果要使用\则需要使用\\来代替

\w任意字母、数字、_
\W除了字母、数字、_
\d任意的数字[0-9]
\D除了数字[^0-9]
\s空格
\S除了空格
\b单词边界 reg=/\bhello\b/;
\B除了单词边界
*/



十二、
DOM:Document Object Model


/*
浏览器已经为我们提供 文档节点 对象这个对象是window属性
可以在页面中直接使用，文档节点代表的是整个网页
*/
<body>
<button id="btn">我是一个按钮</button>
<script type="text/javascript">
//获取到button对象
var btn=document.getElementById("btn");
//修改按钮的文字
btn.innerHTML="I'm Button";
</script>
</body>

/*
事件,就是用户和浏览器之间的交互行为
比如，点击按钮，鼠标移动，关闭窗口
我们可以再事件对应的属性中设置一些js代码
这样当事件被触发时，这些代码将会执行
这种写法我们称为结构和行为耦合，不方便维护，不推荐使用
*/
<body>
<button id="btn" onclick="alert("讨厌，你点我干嘛")">我是一个按钮</button>
<script type="text/javascript">
//获取到button对象
var btn=document.getElementById("btn");
//修改按钮的文字
btn.innerHTML="I'm Button";

/*
可以为按钮的对应事件绑定处理函数的形式来响应事件
当我们事件被触发时，其对应的函数将会被调用
*/
//绑定一个双击事件
//像这种为双击事件绑定的函数，我们称为双击响应函数
btn.ondbclick=function(){
alert("你还点~~");
};
</script>
</body>

/*
浏览器在加载一个页面时，是按照自上向下的顺序加载的
将js代码编写到页面的下部就是为了，可以在页面加载完毕以后再执行js代码
如果将script标签写道页面的上方在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载
会导致无法获取到DOM对象 
*/

/*
onload事件会在整个页面加载完成之后才触发
为window绑定一个onload事件
该事件对应的响应函数将会在页面加载完成之后执行
这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了
*/
<head>
<script>
//onload方法会在页面所有执行完成后才执行
window.onload=function(){
var btn=document.getElementById("btn");
//修改按钮的文字
btn.innerHTML="I'm Button";
btn.ondbclick=function(){
alert("你还点~~");
};
};
</script>
</head>
<body>
<button id="btn">点我一下</button>
</body>

//通过document对象调用
1.getElementById()
通过id属性获取一个元素节点对象
2.getElementsByTagName()
通过标签名获取一组元素节点对象:返回的是一个类数组对象，Collection类型
3.getElementsByName();
通过name属性获取一组元素节点对象

/*
innerHTML用于获取元素内部的HTML代码的
对于单标签，这个属性没有意义
如果需要获取元素节点属性
直接使用元素.属性名
例子：元素.id 元素.name 元素.value
注意：class属性不能采用这种方式
读取class属性时需要使用元素.className
*/

获取元素节点的子节点
通过具体的元素节点调用
1.getElementsByTagName()
方法，返回当前节点的指定标签名后代节点
2.childNodes：会获取包括文本节点在内的所有节点，根据DOM标签标签间空白也会当成文本,在IE8以下不会将空白当作子节点
属性，表示当前节点的所有子节点
/*
children属性可以获取当前元素的所有子元素，而不包括文本节点（空格）
*/
3.firstChild
属性，表示当前节点的第一个子节点
/*
firstElementChild：获取当前元素的第一个子节点，不支持IE8及以下的浏览器
*/
4.lastChild
属性，表示当前节点的最后一个子节点

获取父节点和兄弟节点
通过具体的节点调用
1.parentNode
属性，表示当前节点的父节点
2.previousSibling
属性，表示当前节点的前一个兄弟节点
3.nextSibling
属性，表示当前节点的后一个兄弟节点

/*
innerText
该属性可以获取到元素内部的文本内容
它和innerHTML类似，不同的是它会自动将html去除
*/
/*
文本框中的value属性值，就是文本框中填写的内容
*/


//如果要获取body标签对象document中有一个body属性,它保存的是body的引用，则不用再使用getElementByTagName("body")[0].直接使用document.body获取对象
//document.documentElement保存的是html根标签
//document.all代表页面中所有的元素
//document.getElementsByClassName(classname):根据元素的class属性值查询一组元素节点对象，但是该方法不支持IE8及以下的浏览器
/*document.querySelector():
需要一个选择器的字符串作为参数，
可以根据一个CSS选择器来查询一个元素节点对象如：
var div=document.querySelector(".box1 div");
获取某一个class属性里的标签
虽然IE8中没有getElementsByClassName()
但是可以是使用querySelector()代替
使用发i方法总是会返回唯一的一个元素，如果满足条件的元素有多个
那么它只会返回第一个
*/


/*
document.createElement()
可以用于创建一个元素节点对象，它需要一个标签名
作为参数，将会根据该标签名创建元素节点对象
并将创建好的对象作为返回值返回
*/

var li=document.createElement("li");
//创建广州文本节点

/*
document.createTextNode()
可以用来创建一个文本节点对象
需要一个文本内容作为参数
将会根据该内容创建文本节点
并将新的节点返回
*/
var gzText=document.createTextNode("广州");
//将gzText设置li的子节点
/*
appendChild()
向一个父节点中添加一个新的子节点
用法：父节点.appendChild(子节点);
*/
li.appendChild(gzText);
//获取id为city的节点
var city=document.getElementById("city");
//将广州添加到city下即添加到ul下，id为city
city.appendChild(li);

city.innerHTML+="<li>广州</li>";//使用innerHTML也可以进行增删改操作,一般我们两种方式结合使用
/*
var li=document.createElement("li");
li.innerHTML="广州";
city.appendChild(li);
*/

//将"广州"节点插入到#bj前面
myClick("btn02",function(){
//创建一个广州
var li=document.createElement("li");
var gzText=document.createTextNode("广州");
li.appendChild(gzText);

//获取id为bj的节点
var bj=document.getElementById("bj");
//获取city
var city=document.getElementById("city");
/*
insertBefore()
可以在指定的子节点前插入新的子节点
语法：
	父节点.insertBefore(新节点，旧节点);
*/
city.insertBefore(li,bj);
});



/*
使用"广州"节点替换#bj节点
myClick("btn03",function(){
var li=document.createElement("li");
var gzText=document.createTextNode("广州");
li.appendChild(gzText);
var bj=document.getElementById("bj");
var city=document.getElementById("city");
/*
replaceChild()
可以使用指定的子节点替换已有的子节点
语法：父节点.replaceChild(新节点,旧节点);
*/
city.replaceChild(li,bj);
});
//删除#bj节点
myClick("btn04"，function(){
var city=document.getElementById("city");
/*
removeChild()
可以删除一个子节点
语法:子节点.removeChild(子节点);
*/
//city.removeChild(bj);
bj.parentNode.removeChild(bj);//不用再去获取父元素var city，直接移除
});

//读取样式
语法：元素.style.样式名
注：只能读取内联样式

//获取元素当前显示的样式
语法：元素.currentStyle.样式名
它可以用来读取当前元素正在显示的样式
currentStyle只有IE浏览器支持，其他的浏览器都不支持

//getComputedStyle()这个方法来获取元素当前的样式
这个方法是window的方法，可以直接使用,该方法会返回一个对象，对象中封装了当前元素对应的样式
需要两个参数
第一个：要获取样式的元素
第二个：可以传递一个伪元素,一般都传null
var obj=getComputedStyle(box1,null);
alert(obj.width);

/*
clientWidth
clientHeight
这两个属性可以获取元素的可见宽度和高度
这些属性都是不带px的，返回都是一个数字，可以直接进行计算
会获取元素宽度和高度，包括内容区和内边距
这些属性都是只读的，不能修改
*/

/*
offsetWidth
offsetHeight
获取元素的整个的宽度和亮度，包括内容区，内边距和边框
*/

/*
offsetParent
可以用来获取当前元素的定位父元素
会获取到离当前元素最近的开启了定位的祖先元素
如果所有的祖先元素都没有开启定位，则返回body
*/

/*
offsetLeft
当前元素相对于其定位元素的水平偏移量
offsetTop
当前元素相对于其定位元素的垂直偏移量
*/

/*
scrollWidth
scrollHeight
可以获取元素整个滚动区域的宽度和高度
*/

十三、
/*
onmousemove
该事件将会在鼠标的元素中移动时被触发
事件对象
当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数
在事件对象中封装了当前事件相关的的一切信息，比如，鼠标的坐标，键盘哪个按键被按下，鼠标滚轮移动的方向
*/
areaDiv.oumousemove=function(event){
alert(event);
//event.pageX与event.pageY可以获取鼠标相对于当前页面的坐标但在IE8中不支持

/*
var x=event.clientX;
var y=event.clientY;
*/

alert("x="+x+",y="+y);//x与y的横纵坐标

};


/*
事件的冒泡(Bubble)
所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发
在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡
event.cancelBubble=true;
*/


/*
addEventListener()
通过这个方式也可以为元素绑定响应函数
回调函数，当事件触发时该函数会被调用
是否在捕获阶段触发事件，需要一个布尔值，一般都传false
使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数
这样当事件被触发时，响应函数就会按照函数的绑定顺序执行
这个方法不支持IE8及以下的浏览器
*/
btn01.addEventListener("click",function(){
alert(1);
},false);
btn01.addEventListener("click",function(){
alert(2);
},false);

/*
attachEvent()
在IE8中可以使用attachEvent()来绑定事件
参数：
1.事件的字符串,要on
2.回调函数
这个方法也可以同时为一个事件绑定多个处理函数
不同的时它时后绑定先执行，执行顺序和addEventListener()相反
*/
btn01.attachEvent("onclick",function(){
alert(1);
});

//定义一个函数,用来为指定元素绑定响应函数
/*
addEventListener()中的this,是绑定事件的对象
attachEvent()中的this,是window
需要统一两个方法this
*/
/*
参数：
obj 要绑定事件的对象
eventStr 事件的字符串(不要on)
callback 回调函数
*/
function bind(obj,eventStr,callback){
if(obj.addEventListener){
obj.addEventListener(eventStr,callback,false);
}else{
/*
this是谁由调用方式决定
callback.call(obj)
*/

obj.attachEvent("on"+eventStr,function(){
callback().call(obj);
});
}
}

bind(btn01,"click",function(){
alert(1);
});

/*
事件的传播
关于事件的传播网景公司和微软公司有不同的理解
微软公司认为事件应该是由内向外传播，也就是当事件触发时，因该先触发当前元素上的事件
然后再向当前元素的祖先元素上传播，也就说事件应该再冒泡阶段执行
网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，因该先触发当前元素的最外层的祖先元素的事件
然后在向内传播给后代元素
W3C综合了两个公司的方案，将事件传播分成了三个阶段
1.捕获阶段
在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件
2.目标阶段
事件捕获到目标元素，捕获结束开始在目标元素上触发事件
3.冒泡阶段
事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件

如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true
一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false
IE8及以下的浏览器中没有捕获阶段
*/


//设置btn01对鼠标按下相关的事件进行捕获
//当调用一个元素的setCapture()方法以后，这个元素将会把下一次所有的鼠标按下相关的事件捕获到自身上
//释放捕获releaseCapture()

//为box1绑定一个鼠标滚轮滚动的事件
/*
onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发。
但是火狐不支持该属性
在火狐中需要使用DOMMouseScroll来绑定滚动事件
注意该事件需要通过addEventListener()函数来绑定
*/

//event.wheelDelta可以获取鼠标滚轮滚动方向
//向上滚120,向下滚-120
//wheelDelta这个值我们不看大小，只看正负
//wheelDelta这个属性火狐中不支持
//在火狐中使用event.detail来获取滚动的方向
//向上滚-3,向下滚3


/*
使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false
需要使用event.preventDefault来恢复默认行为

*/



/*
键盘事件：
onkeydown
按键被按下
对于onkeydown来说如果一直按着某个按键不松手，就会一直连续触发
当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快
这种设计是为了防止误操作的做法
onkeyup
按键被松开
键盘事件一般都会绑定给一些可以获取到焦点得对象或者是document
*/

/*
可以通过keyCode来获得按键的编码
通过它可以判断哪个按键被按下
处理keyCode，事件对象还提供了几个属性
altKey
ctrlKey
shiftKey
这个三个用来判断alt ctrl 和shift是否被按下
如果按下则返回true，否则返回false
*/
document.onkeydown=function(event){
event=event||window.event;

console.log(event.keyCode());
}



十四、
/*
BOM
浏览器对象模型
BOM可以使我们通过JS来操作浏览器
在BOM中我为我们提供了一组对象，用来完成对浏览器的操作
BOM对象
Window
代表的是整个浏览器的窗口，同时window也是网页中的全局对象
Navigator
代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器
Location
代表当前浏览器的地址栏信息,通过Location可以获取地址栏信息，或者操作浏览器跳转页面
History
代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录
由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页
而且该操作只在当前当此访问时有效
Screen
代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息


这些BOM对象在浏览器中都是作为window对象的属性保存的
可以通过window对象来使用，也可以直接使用
*/ 

/*
Navigator
代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器
由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了
一般我们只会使用userAgent来判断浏览器的信息
userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容
不同的浏览器会有不同的userAgent
*/
/*
如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息
比如：ActiveXObject
*/

/*
length
属性，可以获取到当前访问的连接数量
alert(history.length);

back()
可以用来回退到上一个页面，作用和浏览器的回退按钮一样
history.back();

forward();
可以跳转到下一个页面，作用和浏览器的前进按钮一样
history.forward();

go()
可以用来跳转到指定的页面
它需要一个整数作为参数
1:表示向前跳转一个页面
2:表示向前跳转两个页面
-1：表示向后跳转一个页面
-2：表示向后跳转两个页面
history.go();
*/

/*
Location
代表当前浏览器的地址栏信息,通过Location可以获取地址栏信息，或者操作浏览器跳转页面

如果直接打印location,则可以获取到地址栏的信息(当前页面的完整路径)
//alert(location);

如果直接将location属性修改为一个完整的路径，或相对路径
则我们页面会自动跳转到该路径，并且会生成相应的历史记录
btn.onclick=function(){
location="www.baidu.com";
}

assign()
用来跳转到其他页面，作用和直接修改location一样
location.assign("http://www.baidu.com");

reload()
用于重新加载当前页面，作用和刷新按钮一样
location.reload(true);

replace()
可以使用一个新的页面替换当前页面,调用完毕也会跳转页面
不会生成历史记录，不能使用回退按钮回退
location.replace("01.BOM.html");
*/

/*
JS的程序的执行速度是非常快的
如果希望一段程序，可以每间隔一段时间执行一次，可以使用定时调用

setInterval(方法，间隔时间)
定时调用
可以将一个函数，每隔一段时间执行一次
参数:
1.回调函数，该函数会每隔一段时间调用一次
2.每次调用间隔的时间，单位是毫秒

setInterval(function(){
方法体
},1000);//每隔一秒执行一次函数

返回值：
返回一个Number类型的数据
这个数字作为定时器的唯一标识
var reNum=setInterval(function(){
方法体
},1000);
//clearInterval()可以用来关闭一个定时器
//方法中需要一个定时器的标识作为参数，这样将关闭表示对应的定时器
clearInterval(reNum)
*/

/*
延时调用
延时调用一个函数不马上执行，而是嗝一段时间以后再执行，只执行一次
延时调用和定时调用的区别，定时调用会执行多次，而延时调用只执行一次
延时调用和定时调用实际上是可以互相代替的
，在开发中可以根据自己需要去选择
var timer=setTimeout(function(){
方法体
},3000);
//使用clearTimeout()来关闭一个延时调用
clearTimeout(timer);
*/

十五、
JSON
JS中的对象只有JS自己认识，其他的语言都不认识
JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别
并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互
-JSON
JavaScript Object Notation JS对象表示法
JSON和JS对象的格式一样，只不过JSON字符串中的属性名必须加双引号
其他的和JS语法一致
JSON分类：
1.对象{}
2.数组[]
JSON中允许的值
1.字符串
2.数值
3.布尔值
4.null
5.对象
6.数组


/*
将JSON字符串转换为JS中的对象
在JS中，为我们提供了一个工具类，就叫JSON
这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON对象

var json='{"name":"孙悟空","age":18,"gender":"男"}'
var obj=JSON.parse(json);
console.log(obj.name);//孙悟空

*/

/*
JS对象--->JSON
JSON.stringify()
可以将一个JS对象转换为JSON字符串
需要一个js对象作为参数，会返回一个JSON字符串
var obj3={name:"猪八戒",age:28,gender:"男"}
var str=JSON.stringify(obj3);//"{"name":"猪八戒","age":28,"gender":"男"}"
console.log(str);
*/


十六、
JS高级：
2.判断
*typeof:返回数据类型的字符串表达
*instanceof
*===

如何调用(执行)函数
test():直接调用
obj.test()通过对象调用
new test():new调用
test.call/apply(obj):临时让test成为obj的方法进行调用

IIFE：Immediately-Invoked Function Expression
作用：隐藏实现 不会污染外部（全局）命名空间
(function(){
var a=3
console.log(a+3)
})()//匿名函数自调用

var a=4//不影响内部a  



/*
1.每个函数function都有一个prototype,即显式原型(属性)
2.每个实例对象都有一个__proto__,可称为隐式原型(属性)
3.对象的隐式原型的值为其对应构造函数的显示原型的值
4.内存结构(图)
5.总结:
函数的prototype属性:在定义函数时自动添加的，默认值是一个空Object对象
对象的__protp__属性:创建对象时自动添加的，默认值为构造函数的prototype属性值
程序员能直接操作显示原型，但不能直接操作隐式原型(ES6之前)
*/


