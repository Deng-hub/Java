
反射：框架设计的灵魂
框架：半成品软件，可以在框架的基础上进行软件开发，简化编码
反射：将类的各个组成部分封装为其他对象，这就是反射机制
好处：
    1.可以在程序运行过程中，操作这些对象：
    2.可以解耦，提高程序的可扩展性
获取Class对象的方式：
1.A阶段可以通过  Class.forName("全类名"):将字节码文件加载进内存，返回Class对象
    多用于配置我呢见，将类名定义在配置文件中，读取文件，加载类
2.B阶段可以通过  类名.class:通过类名的属性class获取
    多用于参数的传递
3.C阶段可以通过  对象.getClass():getClass()方法在object类中定义着.
    多用于对象的获取字节码的方式
结论：
同一个字节码文件（*.class）在一次程序运行过程中，指挥被加载一次，不论通过哪一种方式获取的class对象都是同一个。



A.第一阶段.java文件 源代码阶段
public class Person{
private String name;
private int age;              --->     Person.java
public Person(){}
public void eat(){}
}
编译生成字节码文件：.class
        ||
        ||  javac编译
        ||
      \    /
        \/
private String name;
private int age;           --->       Person.class
public Person(){}                          ||
public void eat(){}                        ||
                                           ||
                                         \ || /
                                           \/
                                 B.第二阶段Class类对象阶段
                                 类加载器  ClassLoader将其加载进内存
成员变量 Filed[] fields
构造方法 Constructor[] cons
成员方法 Method[] methods
        Class类对象
            ||
            ||
            ||
           \  /
            \/
     C.第三阶段 Runtime运行时阶段

          创建对象
          Person对象
          new Person();




Class对象功能：
*获取功能
1.获取成员变量们
   Field[] getFields():获取所有public修饰的成员变量
   Field getField(String name):获取指定public修饰的成员变量

   Field[] getDeclaredFields():获取所有的成员变量，不考虑修饰符
    Field getDeclaredField(String name);
2.获取构造方法们
    Constructor<?>[] getConstructors()
    Constructor<T> getConstructor(类<?>... parameterTypes)

    Constructor<T> getDeclaredConstructor(类<?>... parameterTypes)
    Constructor<?>[] getDeclaredConstructors()
3.获取成员方法们
    Method[] getMethods()
    Method getMethod(String name,类<T>..parameterTypes)

    Method[] getDeclaredMethods()
    Method getDeclaredMethods(String name,类<?>... parameterTypes)
4.获取类名
String getName()

Field:成员变量
  *操作：
  1.设置值
    void set(Object obj,Object value)
  2.获取值
    get(Object obj)
  3.忽略访问权限修饰符的安全检查
    setAccessible(true):暴力反射
Constructor：构造方法
创建对象：
    *创建对象：
        T newInstance(Object... initargs)
    *如果使用空参数构造方法创建对象，操作可以简化的：Class对象的newInstance方法
Method:方法对象
    *执行方法：
        Object invoke(Object obj,Object... args)
    *获取方法名称：
    String getName

*案例：
   *需求：写一个“框架”，可以帮我们创建任意类的对象，并且执行其中任意方法
      *实现：
      1.配置文件
      2.反射
    *步骤：
      1.将需要创建的对象的全类名和需要执行的放法定义在配置文件中
      2.在啊程序中加载读取配置文件
      3.使用反射技术来加载类文件进内存
      4.创建对象
      5.执行方法